{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/mille/OneDrive/Documents/GC2022/DonutShop/DonutShop/DonutShop/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpErrorResponse } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DonutShopService {\n  constructor(httpClient, newBaseUrl) {\n    this.httpClient = httpClient;\n    this.aspBaseUrl = \"\";\n    this.donutApiUrl = \"https://grandcircusco.github.io/demo-apis/donuts.json\";\n    this.donutDetailUrl = \"https://grandcircusco.github.io/demo-apis/donuts/\";\n    this.aspBaseUrl = newBaseUrl;\n  }\n\n  getDonutList() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let callResult = null;\n\n      try {\n        callResult = yield _this.httpClient.get(_this.donutApiUrl).toPromise();\n        console.log('Service received ' + callResult.count.toString() + ' users');\n      } catch (unexpectedException) {\n        callResult = [];\n        callResult.data = [];\n\n        if (unexpectedException instanceof HttpErrorResponse) {\n          let unexpectedExceptionHttp = unexpectedException;\n          console.log('Error sending http request ' + _this.donutApiUrl + ': ' + unexpectedExceptionHttp.message);\n        }\n      }\n\n      return callResult.results;\n    })();\n  }\n\n  getDonutDetails(id) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let thisDonut = null;\n\n      try {\n        let donutString = _this2.donutDetailUrl;\n        donutString = donutString + id + \".json\";\n        thisDonut = yield _this2.httpClient.get(donutString).toPromise();\n        console.log('Donut details for Donut' + id + 'were successfully retrieved');\n      } catch (unexpectedException) {\n        thisDonut = [];\n\n        if (unexpectedException instanceof HttpErrorResponse) {\n          let unexpectedExceptionHttp = unexpectedException;\n          console.log('Cannot get donut with ID ' + id + ':' + unexpectedExceptionHttp.message);\n        }\n      }\n\n      return thisDonut;\n    })();\n  }\n\n}\n\nDonutShopService.ɵfac = function DonutShopService_Factory(t) {\n  return new (t || DonutShopService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\n\nDonutShopService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DonutShopService,\n  factory: DonutShopService.ɵfac,\n  providedIn: 'root'\n});\nexport class Donut {\n  constructor() {\n    this.id = 0;\n    this.ref = \"\";\n    this.name = \"\";\n    this.photo = \"\";\n    this.photo_attribution = \"\";\n    this.calories = 0;\n    this.extras = [];\n  }\n\n}\nexport class DonutApiResponse {\n  constructor() {\n    this.count = 0;\n    this.results = [];\n  }\n\n}","map":{"version":3,"sources":["C:/Users/mille/OneDrive/Documents/GC2022/DonutShop/DonutShop/DonutShop/ClientApp/src/app/donut-shop.service.ts"],"names":["HttpErrorResponse","i0","i1","DonutShopService","constructor","httpClient","newBaseUrl","aspBaseUrl","donutApiUrl","donutDetailUrl","getDonutList","callResult","get","toPromise","console","log","count","toString","unexpectedException","data","unexpectedExceptionHttp","message","results","getDonutDetails","id","thisDonut","donutString","ɵfac","DonutShopService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","Donut","ref","name","photo","photo_attribution","calories","extras","DonutApiResponse"],"mappings":"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","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class DonutShopService {\r\n    constructor(httpClient, newBaseUrl) {\r\n        this.httpClient = httpClient;\r\n        this.aspBaseUrl = \"\";\r\n        this.donutApiUrl = \"https://grandcircusco.github.io/demo-apis/donuts.json\";\r\n        this.donutDetailUrl = \"https://grandcircusco.github.io/demo-apis/donuts/\";\r\n        this.aspBaseUrl = newBaseUrl;\r\n    }\r\n    async getDonutList() {\r\n        let callResult = null;\r\n        try {\r\n            callResult = await this.httpClient.get(this.donutApiUrl).toPromise();\r\n            console.log('Service received ' + callResult.count.toString() + ' users');\r\n        }\r\n        catch (unexpectedException) {\r\n            callResult = [];\r\n            callResult.data = [];\r\n            if (unexpectedException instanceof HttpErrorResponse) {\r\n                let unexpectedExceptionHttp = unexpectedException;\r\n                console.log('Error sending http request ' + this.donutApiUrl + ': ' + unexpectedExceptionHttp.message);\r\n            }\r\n        }\r\n        return callResult.results;\r\n    }\r\n    async getDonutDetails(id) {\r\n        let thisDonut = null;\r\n        try {\r\n            let donutString = this.donutDetailUrl;\r\n            donutString = donutString + id + \".json\";\r\n            thisDonut = await this.httpClient.get(donutString).toPromise();\r\n            console.log('Donut details for Donut' + id + 'were successfully retrieved');\r\n        }\r\n        catch (unexpectedException) {\r\n            thisDonut = [];\r\n            if (unexpectedException instanceof HttpErrorResponse) {\r\n                let unexpectedExceptionHttp = unexpectedException;\r\n                console.log('Cannot get donut with ID ' + id + ':' + unexpectedExceptionHttp.message);\r\n            }\r\n        }\r\n        return thisDonut;\r\n    }\r\n}\r\nDonutShopService.ɵfac = function DonutShopService_Factory(t) { return new (t || DonutShopService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL')); };\r\nDonutShopService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DonutShopService, factory: DonutShopService.ɵfac, providedIn: 'root' });\r\nexport class Donut {\r\n    constructor() {\r\n        this.id = 0;\r\n        this.ref = \"\";\r\n        this.name = \"\";\r\n        this.photo = \"\";\r\n        this.photo_attribution = \"\";\r\n        this.calories = 0;\r\n        this.extras = [];\r\n    }\r\n}\r\nexport class DonutApiResponse {\r\n    constructor() {\r\n        this.count = 0;\r\n        this.results = [];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}